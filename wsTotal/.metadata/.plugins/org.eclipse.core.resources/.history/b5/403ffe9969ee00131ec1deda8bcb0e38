package com.totalannihilationroadrage;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXParseException;
import org.xml.sax.ext.DefaultHandler2;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

public class Handler  extends DefaultHandler2
{
	private Locator locator;
	
	@Override
	public void characters(char[] ch, int start, int length)
	{
		/*System.out.print("characters() [");
		OutputView.outputText("characters() [");
		for (int i = start; i < start + length; i++)
		{
			System.out.print(ch[i]);
			OutputView.outputText(String.valueOf(ch[i]));
		}
		System.out.println("]");
		OutputView.outputText("]\n");*/
	}
	
	@Override
	public void comment(char[] ch, int start, int length)
	{
		/*System.out.print("characters() [");
		OutputView.outputText("characters() [");
		for (int i = start; i < start + length; i++)
		{
			System.out.print(ch[i]);
			OutputView.outputText(String.valueOf(ch[i]));
		}
		System.out.println("]");
		OutputView.outputText("]\n");*/
	}
	
	@Override
	public void endCDATA()
	{
		/*System.out.println("endCDATA()");
		OutputView.outputText("endCDATA()\n");*/
	}
	
	@Override
	public void endDocument()
	{
		//System.out.println("endDocument()");
		//OutputView.outputText("endDocument()\n");
	}
	
	@Override
	public void endDTD()
	{
		/*System.out.println("endDTD()");
		OutputView.outputText("endDTD()\n");*/
	}

	@Override
	public void endElement(String uri, String localName, String qName)
	{
		//System.out.print("endElement() ");
		//OutputView.outputText("endElement() ");
		//System.out.print("uri=[" + uri + "], ");
		//OutputView.outputText("uri=[" + uri + "], ");
		//System.out.print("localName=[" + localName + "], ");
		//OutputView.outputText("localName=[" + localName + "], ");
		//System.out.println("qName=[" + qName + "]");
		//OutputView.outputText("qName=[" + qName + "]\n");
	}
	
	@Override
	public void endEntity(String name)
	{
		/*System.out.print("endEntity() ");
		OutputView.outputText("endEntity() ");
		System.out.println("name=[" + name + "]");
		OutputView.outputText("name=[" + name + "]\n");*/
	}
	
	@Override
	public void endPrefixMapping(String prefix)
	{
		/*System.out.print("endPrefixMapping() ");
		OutputView.outputText("endPrefixMapping() ");
		System.out.println("prefix=[" + prefix + "]");
		OutputView.outputText("prefix=[" + prefix + "]\n");*/
	}
	
	@Override
	public void error(SAXParseException saxpe)
	{
		System.out.println("error() " + saxpe);
		//OutputView.outputText("error() " + saxpe + "\n");
	}
	
	@Override
	public void fatalError(SAXParseException saxpe)
	{
		System.out.println("fatalError() " + saxpe);
		//OutputView.outputText("fatalError() " + saxpe + "\n");
	}
	
	@Override
	public void ignorableWhitespace(char[] ch, int start, int length)
	{
		/*System.out.print("ignorableWhitespace() [");
		OutputView.outputText("ignorableWhitespace() [");
		for (int i = start; i < start + length; i++)
		{
			System.out.print(ch[i]);
			OutputView.outputText(String.valueOf(ch[i]));
		}
		System.out.println("]");
		OutputView.outputText("]\n");*/
	}
	
	@Override
	public void notationDecl(String name, String publicId, String systemId)
	{
		/*System.out.print("notationDecl() ");
		OutputView.outputText("notationDecl() ");
		System.out.print("name=[" + name + "]");
		OutputView.outputText("name=[" + name + "]");
		System.out.print("publicId=[" + publicId + "]");
		OutputView.outputText("publicId=[" + publicId + "]");
		System.out.println("systemId=[" + systemId + "]");
		OutputView.outputText("systemId=[" + systemId + "]\n");*/
	}
	
	@Override
	public void processingInstruction(String target, String data)
	{
		/*System.out.print("processingInstruction() [");
		OutputView.outputText("processingInstruction() [");
		System.out.println("target=[" + target + "]");
		OutputView.outputText("target=[" + target + "]\n");
		System.out.println("data=[" + data + "]");
		OutputView.outputText("data=[" + data + "]\n");*/
	}
	
	//@Override
	//public InputSource resolveEntity(String publicId, String systemId)
	//{
		/*System.out.print("resolveEntity() ");
		OutputView.outputText("resolveEntity() ");
		System.out.print("publicId=[" + publicId + "]");
		OutputView.outputText("publicId=[" + publicId + "]");
		System.out.println("systemId=[" + systemId + "]");
		OutputView.outputText("systemId=[" + systemId + "]\n");
		// Do not perform a remapping.
		InputSource is = new InputSource();
		is.setPublicId(publicId);
		is.setSystemId(systemId);
		return is;*/
	//}
	
	@Override
	public void setDocumentLocator(Locator locator)
	{
		/*System.out.print("setDocumentLocator() ");
		OutputView.outputText("setDocumentLocator() ");
		System.out.println("locator=[" + locator + "]");
		OutputView.outputText("locator=[" + locator + "]\n");
		this.locator = locator;*/
	}
	
	@Override
	public void skippedEntity(String name)
	{
		/*System.out.print("skippedEntity() ");
		OutputView.outputText("skippedEntity() ");
		System.out.println("name=[" + name + "]");
		OutputView.outputText("name=[" + name + "]\n");*/
	}
	
	@Override
	public void startCDATA()
	{
		/*System.out.println("startCDATA()");
		OutputView.outputText("startCDATA()\n");*/
	}
	
	@Override
	public void startDocument()
	{
		//System.out.println("startDocument()");
		//OutputView.outputText("startDocument()\n");
	}
	
	@Override
	public void startDTD(String name, String publicId, String systemId)
	{
		/*System.out.print("startDTD() ");	
		OutputView.outputText("startDTD() ");
		
		System.out.print("name=[" + name + "]");
		OutputView.outputText("name=[" + name + "]");
		System.out.print("publicId=[" + publicId + "]");
		OutputView.outputText("publicId=[" + publicId + "]");
		System.out.println("systemId=[" + systemId + "]");
		OutputView.outputText("systemId=[" + systemId + "]\n");*/
	}
	
	@Override
	public void startElement(String uri, String localName, String qName, Attributes attributes)
	{
		//System.out.print("startElement() ");
		//OutputView.outputText("startElement() ");
		//System.out.print("uri=[" + uri + "], ");
		//OutputView.outputText("uri=[" + uri + "], ");
		//System.out.print("localName=[" + localName + "], ");
		//OutputView.outputText("localName=[" + localName + "], ");
		//System.out.println("qName=[" + qName + "]");
		//OutputView.outputText("qName=[" + qName + "]\n");
		//for (int i = 0; i < attributes.getLength(); i++)
		//{
			//System.out.println(" Attribute: " + attributes.getLocalName(i) + ", " + attributes.getValue(i));
			//OutputView.outputText(" Attribute: " + attributes.getLocalName(i) + ", " + attributes.getValue(i) + "\n");
		//}
		//System.out.println("Column number=[" + locator.getColumnNumber() + "]");
		//OutputView.outputText("Column number=[" + locator.getColumnNumber() + "]\n");
		//System.out.println("Line number=[" + locator.getLineNumber() + "]");
		//OutputView.outputText("Line number=[" + locator.getLineNumber() + "]\n");
	}
	
	@Override
	public void startEntity(String name)
	{
		/*System.out.print("startEntity() ");
		OutputView.outputText("startEntity() ");
		System.out.println("name=[" + name + "]");
		OutputView.outputText("name=[" + name + "]\n");*/
	}
	
	@Override
	public void startPrefixMapping(String prefix, String uri)
	{
		/*System.out.print("startPrefixMapping() ");
		OutputView.outputText("startPrefixMapping() ");
		System.out.print("prefix=[" + prefix + "]");
		OutputView.outputText("prefix=[" + prefix + "]");
		System.out.println("uri=[" + uri + "]");
		OutputView.outputText("uri=[" + uri + "]\n");*/
	}
	
	@Override
	public void unparsedEntityDecl(String name, String publicId, String systemId, String notationName)
	{
		/*System.out.print("unparsedEntityDecl() ");
		OutputView.outputText("unparsedEntityDecl() ");
		System.out.print("name=[" + name + "]");
		OutputView.outputText("name=[" + name + "]");
		System.out.print("publicId=[" + publicId + "]");
		OutputView.outputText("publicId=[" + publicId + "]");
		System.out.print("systemId=[" + systemId + "]");
		OutputView.outputText("systemId=[" + systemId + "]");
		System.out.println("notationName=[" + notationName + "]");
		OutputView.outputText("notationName=[" + notationName + "]\n");*/
	}
	
	@Override
	public void warning(SAXParseException saxpe)
	{
		System.out.println("warning() " + saxpe);
		//OutputView.outputText("warning() " + saxpe + "\n");
	}	
}
